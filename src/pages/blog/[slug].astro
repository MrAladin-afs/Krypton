---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Container from "@/components/container.astro";
import Typography from "@/components/ui/typography.astro";
import { User, Calendar, Clock, ArrowLeft, Share2 } from "lucide-react";

// Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the entry directly from the prop on render
const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Layout title={entry.data.title}>
  <Container>
    <article class="mx-auto max-w-3xl mt-14">
      <!-- Article Header -->
      <header class="mb-8">
        <div class="space-y-4">
          <!-- Category Badge -->
          <div class="flex items-center">
            <span
              class="bg-primary/10 text-primary rounded-full px-3 py-1 text-sm font-medium">
              {entry.data.category}
            </span>
          </div>

          <!-- Title -->
          <h1
            class="text-primary text-4xl lg:text-5xl font-bold lg:tracking-tight lg:leading-tight">
            {entry.data.title}
          </h1>

          <!-- Featured Image -->
          {
            entry.data.image && (
              <div class="mt-6 mb-8 overflow-hidden rounded-xl border border-border">
                <img
                  src={entry.data.image.src}
                  alt={entry.data.image.alt || entry.data.title}
                  class="w-full h-auto object-cover aspect-[16/9]"
                />
              </div>
            )
          }

          <!-- Metadata -->
          <div
            class="flex flex-wrap gap-4 items-center text-sm text-muted-foreground">
            <!-- Author -->
            <div class="flex items-center gap-2">
              <User size={18} className="text-primary/70" />
              <span class="text-primary">{entry.data.author}</span>
            </div>

            <!-- Date -->
            <div class="flex items-center gap-2">
              <Calendar size={18} className="text-primary/70" />
              <time
                datetime={entry.data.publishDate.toISOString()}
                class="text-primary">
                {
                  new Date(entry.data.publishDate).toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })
                }
              </time>
            </div>

            <!-- Reading Time (estimated) -->
            <div class="flex items-center gap-2">
              <Clock size={18} className="text-primary/70" />
              <span class="text-primary">10 min read</span>
            </div>
          </div>

          <!-- Tags -->
          {
            entry.data.tags && entry.data.tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mt-4">
                {entry.data.tags.map((tag: string) => (
                  <span class="bg-muted text-muted-foreground px-2.5 py-1 rounded-md text-xs font-medium hover:bg-muted/80 transition-colors">
                    #{tag}
                  </span>
                ))}
              </div>
            )
          }
        </div>
      </header>

      <!-- Article Content -->
      <div class="relative">
        <!-- Table of Contents (optional) -->
        <!-- <div class="hidden lg:block absolute left-full ml-10 w-64 top-0">
          <div class="sticky top-24">
            <h3 class="text-sm font-semibold mb-4 text-primary">Table of Contents</h3>
            <nav class="space-y-1 text-sm">
              <a href="#section-1" class="block text-muted-foreground hover:text-primary py-1">Section 1</a>
              <a href="#section-2" class="block text-muted-foreground hover:text-primary py-1">Section 2</a>
            </nav>
          </div>
        </div> -->

        <!-- Main Content -->
        <div class="prose-container">
          <Typography>
            <Content />
          </Typography>
        </div>
      </div>

      <!-- Article Footer -->
      <footer class="mt-12 pt-8 border-t border-border">
        <!-- Share Links -->
        <div
          class="flex flex-col sm:flex-row justify-between items-center gap-4">
          <div class="text-sm text-muted-foreground">
            <div class="flex items-center gap-2">
              <Share2 size={16} />
              <span>Share this article</span>
            </div>
          </div>
          <div class="flex gap-2">
            <a
              href={`https://twitter.com/intent/tweet?text=${entry.data.title}&url=${Astro.url}`}
              target="_blank"
              rel="noopener noreferrer"
              class="bg-muted hover:bg-muted/80 text-muted-foreground p-2 rounded-full transition-colors">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="18"
                height="18"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round">
                <path
                  d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"
                ></path>
              </svg>
            </a>
            <a
              href={`https://www.facebook.com/sharer/sharer.php?u=${Astro.url}`}
              target="_blank"
              rel="noopener noreferrer"
              class="bg-muted hover:bg-muted/80 text-muted-foreground p-2 rounded-full transition-colors">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="18"
                height="18"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round">
                <path
                  d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"
                ></path>
              </svg>
            </a>
            <a
              href={`https://www.linkedin.com/shareArticle?mini=true&url=${Astro.url}&title=${entry.data.title}`}
              target="_blank"
              rel="noopener noreferrer"
              class="bg-muted hover:bg-muted/80 text-muted-foreground p-2 rounded-full transition-colors">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="18"
                height="18"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round">
                <path
                  d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"
                ></path>
                <rect width="4" height="12" x="2" y="9"></rect>
                <circle cx="4" cy="4" r="2"></circle>
              </svg>
            </a>
          </div>
        </div>

        <!-- Back to Blog Link -->
        <div class="text-center mt-10">
          <a
            href="/blog"
            class="inline-flex items-center gap-2 bg-muted hover:bg-muted/80 text-primary px-5 py-3 rounded-md transition-colors">
            <ArrowLeft size={18} />
            Back to Blog
          </a>
        </div>
      </footer>
    </article>
  </Container>
</Layout>

<style>
  /* Add progressive loading effect for images */
  img {
    transition:
      filter 0.5s ease-in-out,
      transform 0.3s ease;
  }

  /* Add subtle hover effect for tags */
  .prose-container {
    position: relative;
  }

  /* Add a subtle highlight effect for code blocks on hover */
  :global(.prose-container pre) {
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
  }

  :global(.prose-container pre:hover) {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }

  /* Improve table responsiveness */
  :global(.prose-container table) {
    display: block;
    overflow-x: auto;
  }

  /* Add smooth scrolling for anchor links */
  html {
    scroll-behavior: smooth;
  }

  /* Ensure proper text selection styling */
  ::selection {
    background: #c03c37;
    color: white;
  }
</style>

<script>
  // Add language labels to code blocks
  document.addEventListener("DOMContentLoaded", () => {
    const codeBlocks = document.querySelectorAll("pre");

    codeBlocks.forEach((pre) => {
      const code = pre.querySelector("code");
      if (code) {
        // Extract language from class (e.g., "language-javascript")
        const classMatch = code.className.match(/language-(\w+)/);
        const language = classMatch ? classMatch[1] : "text";

        // Set data attribute for styling
        pre.setAttribute("data-language", language);
      }
    });
  });
</script>
