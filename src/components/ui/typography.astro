---
import { Typography as TypographyComponent } from "./typography";

interface Props {
  class?: string;
  client?: "load" | "visible" | "idle" | "media" | "only";
  clientParams?: string;
  [x: string]: any;
}

const { class: className, client, clientParams, ...rest } = Astro.props;

// Dynamically set client directive if provided
const clientDirective = client
  ? `client:${client}${clientParams ? `="${clientParams}"` : ""}`
  : null;
---

{
  clientDirective ? (
    <TypographyComponent
      className={className}
      {...rest}
      {...{ [clientDirective]: true }}>
      <slot />
    </TypographyComponent>
  ) : (
    <TypographyComponent className={className} {...rest}>
      <slot />
    </TypographyComponent>
  )
}

<style is:global>
  /* Ensure code blocks have proper syntax highlighting */
  .prose pre {
    background-color: #f8f9fa !important;
    border: 1px solid var(--border);
    position: relative;
    margin: 1.5rem 0;
    padding: 1.25rem;
    padding-top: 2.75rem;
    border-radius: 0.5rem;
    overflow-x: auto;
  }

  .dark .prose pre {
    background-color: #1e1e1e !important;
  }

  /* Add language label to code blocks */
  .prose pre::before {
    content: attr(data-language);
    position: absolute;
    top: 0;
    left: 0;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 600;
    color: #4b5563;
    background-color: rgba(0, 0, 0, 0.05);
    border-top-left-radius: 0.375rem;
    border-bottom-right-radius: 0.375rem;
    opacity: 1;
    text-transform: uppercase;
  }

  .dark .prose pre::before {
    background-color: rgba(255, 255, 255, 0.1);
    color: #d1d5db;
  }

  /* Add copy button to code blocks */
  .prose pre .copy-button {
    position: absolute;
    top: 0;
    right: 0;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 500;
    color: #4b5563;
    background-color: rgba(0, 0, 0, 0.05);
    border: none;
    border-top-right-radius: 0.375rem;
    border-bottom-left-radius: 0.375rem;
    cursor: pointer;
    opacity: 1;
    transition:
      opacity 0.2s,
      background-color 0.2s,
      color 0.2s;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    z-index: 10;
  }

  .prose pre .copy-button::before {
    content: "";
    display: inline-block;
    width: 14px;
    height: 14px;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='%234b5563'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75' /%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
  }

  .dark .prose pre .copy-button::before {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='%23d1d5db'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75' /%3E%3C/svg%3E");
  }

  .dark .prose pre .copy-button {
    background-color: rgba(255, 255, 255, 0.1);
    color: #d1d5db;
  }

  .prose pre .copy-button:hover {
    opacity: 1;
    background-color: rgba(0, 0, 0, 0.1);
  }

  .dark .prose pre .copy-button:hover {
    background-color: rgba(255, 255, 255, 0.15);
  }

  .prose pre .copy-button.copied {
    color: #10b981;
  }

  .prose pre .copy-button.copied::before {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='%2310b981'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z' /%3E%3C/svg%3E");
  }

  /* Ensure code blocks have proper text color */
  .prose pre code {
    background-color: transparent !important;
    color: #374151 !important;
    padding: 0;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
      "Liberation Mono", "Courier New", monospace;
    font-size: 0.875rem;
    line-height: 1.7;
    white-space: pre;
    -webkit-overflow-scrolling: touch;
  }

  .dark .prose pre code {
    color: #e5e7eb !important;
  }

  /* Remove any background color from code spans inside pre */
  .prose pre * {
    background-color: transparent !important;
  }

  /* Fix for inline code */
  .prose :not(pre) > code {
    background-color: rgba(0, 0, 0, 0.05);
    color: #c03c37;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
      "Liberation Mono", "Courier New", monospace;
  }

  .dark .prose :not(pre) > code {
    background-color: rgba(255, 255, 255, 0.1);
    color: #f87171;
  }

  /* Reset all token colors first */
  .prose pre code .token {
    color: #374151 !important;
    background: transparent !important;
  }

  .dark .prose pre code .token {
    color: #e5e7eb !important;
  }

  /* Improved syntax highlighting for all languages - Light Mode */
  /* Comments */
  :root:not(.dark) .prose pre code .token.comment,
  :root:not(.dark) .prose pre code .token.prolog,
  :root:not(.dark) .prose pre code .token.doctype,
  :root:not(.dark) .prose pre code .token.cdata {
    color: #6b7280 !important;
    font-style: italic;
  }

  /* Punctuation and operators */
  :root:not(.dark) .prose pre code .token.punctuation,
  :root:not(.dark) .prose pre code .token.operator {
    color: #1f2937 !important;
    font-weight: 500;
  }

  /* Keywords */
  :root:not(.dark) .prose pre code .token.keyword,
  :root:not(.dark) .prose pre code .token.atrule,
  :root:not(.dark) .prose pre code .token.attr-value {
    color: #4f46e5 !important;
    font-weight: 600;
  }

  /* Properties, tags, booleans, numbers */
  :root:not(.dark) .prose pre code .token.property,
  :root:not(.dark) .prose pre code .token.tag,
  :root:not(.dark) .prose pre code .token.boolean,
  :root:not(.dark) .prose pre code .token.number,
  :root:not(.dark) .prose pre code .token.constant,
  :root:not(.dark) .prose pre code .token.symbol {
    color: #c03c37 !important;
  }

  /* Strings */
  :root:not(.dark) .prose pre code .token.string,
  :root:not(.dark) .prose pre code .token.char,
  :root:not(.dark) .prose pre code .token.attr-name,
  :root:not(.dark) .prose pre code .token.selector,
  :root:not(.dark) .prose pre code .token.builtin {
    color: #0f766e !important;
  }

  /* Functions and class names */
  :root:not(.dark) .prose pre code .token.function,
  :root:not(.dark) .prose pre code .token.class-name {
    color: #ea580c !important;
    font-weight: 500;
  }

  /* Variables, regex, important */
  :root:not(.dark) .prose pre code .token.regex,
  :root:not(.dark) .prose pre code .token.important,
  :root:not(.dark) .prose pre code .token.variable {
    color: #e11d48 !important;
  }

  /* Entity, URL, CSS strings */
  :root:not(.dark) .prose pre code .token.entity,
  :root:not(.dark) .prose pre code .token.url,
  :root:not(.dark) .prose pre code .language-css .token.string,
  :root:not(.dark) .prose pre code .style .token.string {
    color: #9a6e3a !important;
  }

  /* Improved syntax highlighting for all languages - Dark Mode */
  /* Comments */
  .dark .prose pre code .token.comment,
  .dark .prose pre code .token.prolog,
  .dark .prose pre code .token.doctype,
  .dark .prose pre code .token.cdata {
    color: #9ca3af !important;
    font-style: italic;
  }

  /* Punctuation and operators */
  .dark .prose pre code .token.punctuation,
  .dark .prose pre code .token.operator {
    color: #e5e7eb !important;
    font-weight: 500;
  }

  /* Keywords */
  .dark .prose pre code .token.keyword,
  .dark .prose pre code .token.atrule,
  .dark .prose pre code .token.attr-value {
    color: #a5b4fc !important;
    font-weight: 600;
  }

  /* Properties, tags, booleans, numbers */
  .dark .prose pre code .token.property,
  .dark .prose pre code .token.tag,
  .dark .prose pre code .token.boolean,
  .dark .prose pre code .token.number,
  .dark .prose pre code .token.constant,
  .dark .prose pre code .token.symbol {
    color: #f87171 !important;
  }

  /* Strings */
  .dark .prose pre code .token.string,
  .dark .prose pre code .token.char,
  .dark .prose pre code .token.attr-name,
  .dark .prose pre code .token.selector,
  .dark .prose pre code .token.builtin {
    color: #6ee7b7 !important;
  }

  /* Functions and class names */
  .dark .prose pre code .token.function,
  .dark .prose pre code .token.class-name {
    color: #fb923c !important;
    font-weight: 500;
  }

  /* Variables, regex, important */
  .dark .prose pre code .token.regex,
  .dark .prose pre code .token.important,
  .dark .prose pre code .token.variable {
    color: #fb7185 !important;
  }

  /* Entity, URL, CSS strings */
  .dark .prose pre code .token.entity,
  .dark .prose pre code .token.url,
  .dark .prose pre code .language-css .token.string,
  .dark .prose pre code .style .token.string {
    color: #fcd34d !important;
  }

  /* Special styling for cfg language - Light Mode */
  :root:not(.dark) .prose pre[data-language="cfg"] code {
    color: #374151 !important;
  }

  :root:not(.dark) .prose pre[data-language="cfg"] code .token.comment {
    color: #6b7280 !important;
    font-style: italic;
  }

  :root:not(.dark) .prose pre[data-language="cfg"] code .token.property,
  :root:not(.dark) .prose pre[data-language="cfg"] code .token.attr-name {
    color: #4f46e5 !important;
  }

  :root:not(.dark) .prose pre[data-language="cfg"] code .token.string {
    color: #0f766e !important;
  }

  /* Special styling for cfg language - Dark Mode */
  .dark .prose pre[data-language="cfg"] code {
    color: #e5e7eb !important;
  }

  .dark .prose pre[data-language="cfg"] code .token.comment {
    color: #9ca3af !important;
    font-style: italic;
  }

  .dark .prose pre[data-language="cfg"] code .token.property,
  .dark .prose pre[data-language="cfg"] code .token.attr-name {
    color: #a5b4fc !important;
  }

  .dark .prose pre[data-language="cfg"] code .token.string {
    color: #6ee7b7 !important;
  }

  /* Ensure proper text selection in code blocks */
  .prose pre code::selection,
  .prose pre span::selection,
  .prose code::selection {
    background: rgba(192, 60, 55, 0.3);
    color: inherit;
  }

  /* Ensure proper text selection everywhere else */
  .prose *::selection {
    background: rgba(192, 60, 55, 0.3);
    color: inherit;
  }

  /* Enhanced blockquote styling */
  .prose blockquote {
    position: relative;
    margin: 1.5rem 0;
    padding: 1.5rem 2rem 1.5rem 2.5rem;
    background-color: rgba(0, 0, 0, 0.03);
    border-left: 4px solid var(--primary);
    border-radius: 0.375rem;
    font-style: normal;
    color: inherit;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .dark .prose blockquote {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .prose blockquote p {
    margin: 0.5rem 0;
    line-height: 1.7;
  }

  .prose blockquote p:first-of-type {
    margin-top: 0;
  }

  .prose blockquote p:last-of-type {
    margin-bottom: 0;
  }

  .prose blockquote::before {
    content: "\201C";
    position: absolute;
    left: 0.75rem;
    top: 0.5rem;
    font-size: 2.5rem;
    line-height: 1;
    color: var(--primary);
    opacity: 0.3;
    font-family: Georgia, serif;
  }

  /* Nested blockquotes */
  .prose blockquote blockquote {
    margin: 1rem 0;
    border-left-color: rgba(var(--primary), 0.5);
    background-color: rgba(0, 0, 0, 0.02);
  }

  .dark .prose blockquote blockquote {
    background-color: rgba(255, 255, 255, 0.03);
  }

  .prose blockquote blockquote::before {
    content: none;
  }

  /* Table styling */
  .prose table {
    width: 100%;
    margin: 2rem 0;
    border-collapse: separate;
    border-spacing: 0;
    overflow: hidden;
    border-radius: 0.5rem;
    border: 1px solid var(--border);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }

  .prose thead {
    background-color: rgba(0, 0, 0, 0.03);
    color: var(--foreground);
    font-weight: 600;
  }

  .dark .prose thead {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .prose th {
    padding: 0.75rem 1rem;
    text-align: left;
    font-weight: 600;
    border-bottom: 1px solid var(--border);
  }

  .prose td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid var(--border);
    vertical-align: top;
  }

  .prose tr:last-child td {
    border-bottom: none;
  }

  .prose tbody tr:nth-child(even) {
    background-color: rgba(0, 0, 0, 0.01);
  }

  .dark .prose tbody tr:nth-child(even) {
    background-color: rgba(255, 255, 255, 0.02);
  }

  .prose tbody tr:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }

  .dark .prose tbody tr:hover {
    background-color: rgba(255, 255, 255, 0.03);
  }

  /* Task list styling */
  .prose ul:has(li input[type="checkbox"]) {
    list-style-type: none;
    padding-left: 0;
  }

  .prose ul li:has(input[type="checkbox"]) {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    margin: 0.5rem 0;
    padding: 0.25rem 0;
  }

  .prose ul li input[type="checkbox"] {
    margin: 0.25rem 0 0 0;
    height: 1rem;
    width: 1rem;
    border-radius: 0.25rem;
    accent-color: var(--primary);
  }

  /* Horizontal rule */
  .prose hr {
    margin: 2rem 0;
    border: 0;
    height: 1px;
    background-color: var(--border);
    background-image: linear-gradient(
      to right,
      rgba(0, 0, 0, 0),
      rgba(0, 0, 0, 0.1),
      rgba(0, 0, 0, 0)
    );
  }

  .dark .prose hr {
    background-image: linear-gradient(
      to right,
      rgba(255, 255, 255, 0),
      rgba(255, 255, 255, 0.1),
      rgba(255, 255, 255, 0)
    );
  }
</style>

<script is:inline>
  // Add copy button and language detection to all code blocks
  document.addEventListener("astro:page-load", () => {
    const codeBlocks = document.querySelectorAll(".prose pre");

    codeBlocks.forEach((block) => {
      // Create copy button
      const copyButton = document.createElement("button");
      copyButton.className = "copy-button";
      copyButton.textContent = "Copy";

      // Add button to code block
      block.appendChild(copyButton);

      // Add click event
      copyButton.addEventListener("click", () => {
        const code = block.querySelector("code");
        if (code) {
          navigator.clipboard
            .writeText(code.textContent || "")
            .then(() => {
              copyButton.textContent = "Copied!";
              copyButton.classList.add("copied");

              setTimeout(() => {
                copyButton.textContent = "Copy";
                copyButton.classList.remove("copied");
              }, 2000);
            })
            .catch((err) => {
              console.error("Failed to copy: ", err);
              copyButton.textContent = "Failed";

              setTimeout(() => {
                copyButton.textContent = "Copy";
              }, 2000);
            });
        }
      });
    });

    // Add language detection if not already present
    codeBlocks.forEach((block) => {
      if (
        !block.hasAttribute("data-language") ||
        block.getAttribute("data-language") === ""
      ) {
        const code = block.querySelector("code");
        if (code && code.className) {
          const langMatch = code.className.match(/language-(\w+)/);
          if (langMatch && langMatch[1]) {
            block.setAttribute("data-language", langMatch[1]);
          } else {
            block.setAttribute("data-language", "text");
          }
        } else {
          block.setAttribute("data-language", "text");
        }
      }
    });
  });

  // Run immediately for the current page
  document.addEventListener("DOMContentLoaded", () => {
    const codeBlocks = document.querySelectorAll(".prose pre");

    codeBlocks.forEach((block) => {
      // Create copy button
      const copyButton = document.createElement("button");
      copyButton.className = "copy-button";
      copyButton.textContent = "Copy";

      // Add button to code block
      block.appendChild(copyButton);

      // Add click event
      copyButton.addEventListener("click", () => {
        const code = block.querySelector("code");
        if (code) {
          navigator.clipboard
            .writeText(code.textContent || "")
            .then(() => {
              copyButton.textContent = "Copied!";
              copyButton.classList.add("copied");

              setTimeout(() => {
                copyButton.textContent = "Copy";
                copyButton.classList.remove("copied");
              }, 2000);
            })
            .catch((err) => {
              console.error("Failed to copy: ", err);
              copyButton.textContent = "Failed";

              setTimeout(() => {
                copyButton.textContent = "Copy";
              }, 2000);
            });
        }
      });
    });

    // Add language detection if not already present
    codeBlocks.forEach((block) => {
      if (
        !block.hasAttribute("data-language") ||
        block.getAttribute("data-language") === ""
      ) {
        const code = block.querySelector("code");
        if (code && code.className) {
          const langMatch = code.className.match(/language-(\w+)/);
          if (langMatch && langMatch[1]) {
            block.setAttribute("data-language", langMatch[1]);
          } else {
            block.setAttribute("data-language", "text");
          }
        } else {
          block.setAttribute("data-language", "text");
        }
      }
    });
  });
</script>
