---
// Define FAQ items
const faqItems = [
  {
    id: "faq-1",
    question: "Which server base is compatible with Krypton?",
    answer:
      "Krypton is compatible with all major server bases including Apache, Nginx, and Node.js. Our system is designed to integrate seamlessly with your existing infrastructure, regardless of the server environment you're using.",
  },
  {
    id: "faq-2",
    question: "Does Krypton work with all frameworks?",
    answer:
      "Yes, Krypton is framework-agnostic and works with all popular frameworks including React, Vue, Angular, Svelte, and more. We've designed our system to be highly adaptable to different development environments.",
  },
  {
    id: "faq-3",
    question: "Is Krypton available worldwide?",
    answer:
      "Absolutely! Krypton services are available globally. We have servers strategically located around the world to ensure fast and reliable service no matter where you or your customers are located.",
  },
  {
    id: "faq-4",
    question: "What payment methods do you accept?",
    answer:
      "We accept all major credit cards, PayPal, and bank transfers. For enterprise customers, we also offer invoice-based payment options. If you require a specific payment method, please contact our sales team.",
  },
  {
    id: "faq-5",
    question: "How long does delivery take?",
    answer:
      "After purchase, you'll receive access to Krypton immediately. For custom implementations, our team typically completes setup within 24-48 hours, depending on the complexity of your requirements.",
  },
  {
    id: "faq-6",
    question: "What is your refund policy?",
    answer:
      "We offer a 30-day money-back guarantee. If you're not satisfied with Krypton for any reason, simply contact our support team within 30 days of purchase, and we'll process your refund promptly.",
  },
  {
    id: "faq-7",
    question: "How long do you provide support?",
    answer:
      "We provide comprehensive support for all customers. Standard plans include 12 months of support and updates, while premium plans offer extended support periods. Enterprise customers receive dedicated support channels.",
  },
  {
    id: "faq-8",
    question: "Do you help with installation?",
    answer:
      "Yes, we provide detailed documentation and installation guides for all customers. Premium and Enterprise plans include personalized installation assistance from our technical team to ensure a smooth setup process.",
  },
  {
    id: "faq-9",
    question: "Can I upgrade my plan later?",
    answer:
      "Absolutely! You can upgrade your Krypton plan at any time. We'll prorate the cost based on your current subscription, making the transition seamless and cost-effective.",
  },
  {
    id: "faq-10",
    question: "Is there a free trial available?",
    answer:
      "Yes, we offer a 14-day free trial with full access to all features. No credit card is required to start your trial, allowing you to thoroughly evaluate Krypton before making a commitment.",
  },
];
---

<section class="relative py-20 overflow-hidden">
  <!-- Background pattern -->
  <div class="absolute inset-0 bg-grid-pattern opacity-5"></div>

  <!-- Decorative elements -->
  <div
    class="absolute top-0 left-1/4 w-64 h-64 bg-indigo-500/20 rounded-full filter blur-3xl">
  </div>
  <div
    class="absolute bottom-0 right-1/4 w-80 h-80 bg-purple-500/20 rounded-full filter blur-3xl">
  </div>

  <div class="container mx-auto px-4 relative z-10">
    <div class="text-center mb-16">
      <h2
        class="text-4xl md:text-5xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-purple-500 animate-text">
        Frequently Asked Questions
      </h2>
      <p class="text-lg text-gray-300 max-w-2xl mx-auto">
        Find answers to common questions about Krypton. Can't find what you're
        looking for?
        <span
          class="text-indigo-400 hover:text-purple-400 transition-colors duration-300"
          >Contact our support team</span
        >.
      </p>
    </div>

    <div class="max-w-3xl mx-auto">
      <!-- FAQ Glass Container -->
      <div class="backdrop-blur-lg bg-black/10 rounded-2xl p-1 shadow-xl">
        <div class="bg-black/40 rounded-2xl p-6 md:p-8">
          <!-- FAQ Items -->
          <div class="space-y-4">
            {
              faqItems.map((item) => (
                <div class="faq-item rounded-xl overflow-hidden" id={item.id}>
                  <button
                    class="faq-question group w-full flex items-center justify-between p-5 bg-black/20 hover:bg-black/30 rounded-xl text-left transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
                    aria-expanded="false"
                    aria-controls={`${item.id}-answer`}>
                    <span class="text-lg font-medium group-hover:text-indigo-400 transition-colors duration-300">
                      {item.question}
                    </span>
                    <div class="faq-icon-container relative flex-shrink-0 ml-4 w-6 h-6 rounded-full border border-indigo-500/50 group-hover:border-indigo-400 transition-colors duration-300">
                      <span class="faq-icon-vertical absolute top-1/2 left-1/2 w-3 h-0.5 -translate-x-1/2 -translate-y-1/2 bg-indigo-400 transition-transform duration-300" />
                      <span class="faq-icon-horizontal absolute top-1/2 left-1/2 w-0.5 h-3 -translate-x-1/2 -translate-y-1/2 bg-indigo-400 transition-transform duration-300" />
                    </div>
                  </button>
                  <div
                    class="faq-answer overflow-hidden max-h-0 opacity-0 transition-all duration-500 ease-in-out"
                    id={`${item.id}-answer`}
                    aria-hidden="true">
                    <div class="p-5 bg-black/20 rounded-b-xl border-t border-gray-700">
                      <p class="text-gray-300">{item.answer}</p>
                    </div>
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      </div>

      <!-- Contact CTA -->
      <div class="text-center mt-12">
        <p class="text-gray-400 mb-4">Still have questions?</p>
        <a
          href="/contact"
          class="inline-block px-8 py-3 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-full text-white font-medium hover:shadow-lg hover:shadow-indigo-500/20 transition-all duration-300 transform hover:-translate-y-1">
          Get in touch
        </a>
      </div>
    </div>
  </div>
</section>

<style>
  .bg-grid-pattern {
    background-image: linear-gradient(
        to right,
        rgba(255, 255, 255, 0.05) 1px,
        transparent 1px
      ),
      linear-gradient(to bottom, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 40px 40px;
  }

  .animate-text {
    background-size: 200% auto;
    animation: textShine 5s ease-in-out infinite alternate;
  }

  @keyframes textShine {
    0% {
      background-position: 0% center;
    }
    100% {
      background-position: 100% center;
    }
  }

  /* FAQ Item Styles */
  .faq-item.active .faq-question {
    background-color: rgba(0, 0, 0, 0.3);
    color: rgb(129, 140, 248);
    border-radius: 0.75rem 0.75rem 0 0;
  }

  .faq-item.active .faq-icon-container {
    border-color: rgb(129, 140, 248);
    background-color: rgba(129, 140, 248, 0.2);
  }

  .faq-item.active .faq-icon-vertical {
    transform: translate(-50%, -50%) rotate(90deg);
  }

  .faq-item.active .faq-answer {
    max-height: 1000px;
    opacity: 1;
  }
</style>

<script>
  // Add interactivity to FAQ items
  document.addEventListener("DOMContentLoaded", () => {
    const faqItems = document.querySelectorAll(".faq-item");

    faqItems.forEach((item) => {
      const button = item.querySelector(".faq-question");
      const answer = item.querySelector(".faq-answer");
      const verticalIcon = item.querySelector(".faq-icon-vertical");

      if (button && answer) {
        button.addEventListener("click", () => {
          const expanded = button.getAttribute("aria-expanded") === "true";

          // Toggle current item
          button.setAttribute("aria-expanded", expanded ? "false" : "true");
          answer.setAttribute("aria-hidden", expanded ? "true" : "false");
          item.classList.toggle("active");

          // Optional: Close other items when opening this one
          if (!expanded) {
            faqItems.forEach((otherItem) => {
              if (otherItem !== item) {
                const otherButton = otherItem.querySelector(".faq-question");
                const otherAnswer = otherItem.querySelector(".faq-answer");
                otherItem.classList.remove("active");
                if (otherButton) {
                  otherButton.setAttribute("aria-expanded", "false");
                }
                if (otherAnswer) {
                  otherAnswer.setAttribute("aria-hidden", "true");
                }
              }
            });
          }
        });
      }
    });

    // Add keyboard navigation
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "Tab") return; // Let default tab behavior work

      const activeElement = document.activeElement;
      if (!activeElement || !activeElement.classList.contains("faq-question"))
        return;

      const currentItem = activeElement.closest(".faq-item");
      if (!currentItem) return;

      const allItems = Array.from(document.querySelectorAll(".faq-item"));
      const currentIndex = allItems.indexOf(currentItem);

      let nextIndex: number;
      let nextButton: HTMLElement | null;

      switch (e.key) {
        case "ArrowDown":
          e.preventDefault();
          nextIndex = (currentIndex + 1) % allItems.length;
          nextButton = allItems[nextIndex].querySelector(
            ".faq-question"
          ) as HTMLElement;
          if (nextButton) nextButton.focus();
          break;
        case "ArrowUp":
          e.preventDefault();
          nextIndex = (currentIndex - 1 + allItems.length) % allItems.length;
          nextButton = allItems[nextIndex].querySelector(
            ".faq-question"
          ) as HTMLElement;
          if (nextButton) nextButton.focus();
          break;
        case "Home":
          e.preventDefault();
          nextButton = allItems[0].querySelector(
            ".faq-question"
          ) as HTMLElement;
          if (nextButton) nextButton.focus();
          break;
        case "End":
          e.preventDefault();
          nextButton = allItems[allItems.length - 1].querySelector(
            ".faq-question"
          ) as HTMLElement;
          if (nextButton) nextButton.focus();
          break;
      }
    };

    document.addEventListener("keydown", handleKeyDown);
  });
</script>
