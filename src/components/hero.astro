---
import Link from "@/components/ui/link.astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import FuturisticText from "./FuturisticText";
import LazyYouTube from "./LazyYouTube";

// Define the YouTube thumbnail URL directly in the frontmatter
const thumbnailUrl = "https://i.ytimg.com/vi/s8WHY3Gusx0/maxresdefault.jpg";
// Define dimensions for the thumbnail
const thumbnailWidth = 1280;
const thumbnailHeight = 720;
---

<main
  class="grid lg:grid-cols-12 place-items-center pt-16 pb-8 md:pt-12 md:pb-24 px-4 custom-cursor-area">
  <!-- Content section - 5 columns on large screens -->
  <div class="content-wrapper lg:col-span-5 lg:order-1">
    <h1
      class="text-5xl lg:text-6xl xl:text-7xl font-bold lg:tracking-tight xl:tracking-tighter">
      Welcome to <span class="text-shimmer inline-block">Krypton</span> Scripts
    </h1>
    <div class="text-xl mt-6 text-slate-600 dark:text-slate-300 max-w-xl">
      <div class="flex items-center">
        <span>Get all the -</span>
        <FuturisticText
          client:load
          phrases={[
            "Creativity",
            "Optimization",
            "Cheap Price",
            "24/7 Support",
            "Futuristic Design",
            "Premium Quality",
          ]}
          className="text-2xl font-medium ml-1"
          highlightClassName="font-bold"
          typingSpeed={70}
          deletingSpeed={40}
          delayBetweenPhrases={1800}
          cursorStyle="bar"
          shimmerEffect={true}
          cursorColor="var(--primary)"
          showBaseTextOnMobile={false}
        />
      </div>
      <p class="mt-6 text-xl leading-relaxed">
        You will get - 24/7 support and everything you need for your project
        with our premium development solutions.
      </p>
    </div>
    <div class="mt-8 flex flex-col sm:flex-row gap-4 w-full">
      <Link
        href="#"
        class="flex gap-2 items-center justify-center futuristic-button primary-button"
        rel="noopener">
        <Icon class="text-white w-5 h-5" name="bx:bxs-rocket" />
        Get Started
      </Link>
      <a
        href="#features"
        class="flex gap-2 items-center justify-center futuristic-button secondary-button group"
        aria-label="Explore Features">
        <span>Explore Features</span>
        <Icon
          class="text-current w-5 h-5 group-hover:translate-y-1 transition-transform"
          name="bx:bxs-down-arrow"
        />
      </a>
    </div>
  </div>

  <!-- Video section - 7 columns on large screens -->
  <div class="lg:col-span-7 lg:order-2 w-full">
    <div
      class="youtube-container relative rounded-2xl overflow-hidden shadow-2xl shadow-[#5E5FEE]">
      <!-- Use Astro's Image component for the thumbnail -->
      <div class="relative" style="padding-bottom: 56.25%;">
        <Image
          src={thumbnailUrl}
          alt="Formula One: Explained!"
          width={thumbnailWidth}
          height={thumbnailHeight}
          class="absolute inset-0 w-full h-full object-cover"
          loading="eager"
          fetchpriority="high"
          quality={90}
          format="avif"
        />

        <!-- Overlay the LazyYouTube component with autoplay -->
        <div class="absolute inset-0">
          <LazyYouTube
            client:load
            videoId="s8WHY3Gusx0"
            title="Formula One: Explained!"
            autoplayOnLoad={true}
            params={{
              autoplay: 1,
              mute: 1,
              controls: 0,
              rel: 0,
              modestbranding: 1,
              loop: 1,
              playlist: "s8WHY3Gusx0",
              disablekb: 1,
              iv_load_policy: 3,
              fs: 0,
              playsinline: 1,
            }}
          />
        </div>
      </div>
    </div>
  </div>

  <!-- Custom cursor elements - pre-rendered to avoid FOUC -->
  <div id="custom-cursor-dot" class="custom-cursor-dot"></div>
  <div id="custom-cursor-outline" class="custom-cursor-outline"></div>
  <div id="custom-cursor-glow" class="custom-cursor-glow"></div>

  <!-- Scroll indicator -->
  <div
    class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex flex-col items-center opacity-80 hover:opacity-100 transition-opacity duration-300">
    <span class="text-xs uppercase tracking-widest mb-2 text-muted-foreground"
      >Scroll Down</span
    >
    <div
      class="w-6 h-10 border-2 border-primary/50 rounded-full flex justify-center p-1">
      <div class="w-1.5 h-1.5 bg-primary rounded-full animate-scroll-down">
      </div>
    </div>
  </div>
</main>

<style>
  /* Enhanced futuristic styling */
  main {
    position: relative;
    overflow: hidden;
  }

  /* Only hide default cursor when custom cursor is active */
  .cursor-active {
    cursor: none;
  }

  main::before {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(
      circle at center,
      rgba(var(--primary), 0.05) 0%,
      transparent 70%
    );
    z-index: -1;
    animation: pulse 10s infinite;
  }

  .content-wrapper {
    padding: 1rem;
    position: relative;
    z-index: 2;
    max-width: 100%;
  }

  /* Custom cursor styling - enhanced */
  .custom-cursor-dot,
  .custom-cursor-outline,
  .custom-cursor-glow {
    pointer-events: none;
    position: fixed;
    top: 0;
    left: 0;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    z-index: 9999;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .custom-cursor-dot {
    width: 8px;
    height: 8px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(94, 95, 238, 0.8);
    mix-blend-mode: difference;
    transition: transform 0.1s ease-out;
  }

  .custom-cursor-outline {
    width: 40px;
    height: 40px;
    background-color: rgba(94, 95, 238, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.5);
    backdrop-filter: blur(4px);
    transition:
      width 0.4s cubic-bezier(0.16, 1, 0.3, 1),
      height 0.4s cubic-bezier(0.16, 1, 0.3, 1),
      background-color 0.4s ease-in-out,
      border-color 0.4s ease-in-out,
      transform 0.1s ease-out;
  }

  .custom-cursor-glow {
    width: 150px;
    height: 150px;
    background: radial-gradient(
      circle at center,
      rgba(94, 95, 238, 0.15) 0%,
      transparent 70%
    );
    transform: translate(-50%, -50%) scale(0.8);
    transition: transform 0.6s cubic-bezier(0.16, 1, 0.3, 1);
    z-index: 9998;
  }

  /* Cursor states */
  .custom-cursor-outline.hover {
    width: 80px;
    height: 80px;
    background-color: rgba(94, 95, 238, 0.15);
    border-color: rgba(255, 255, 255, 0.8);
    transform: translate(-50%, -50%) scale(1.2);
  }

  .custom-cursor-dot.hover {
    transform: translate(-50%, -50%) scale(0.5);
    background-color: #fff;
  }

  .custom-cursor-glow.hover {
    transform: translate(-50%, -50%) scale(1.4);
  }

  /* Magnetic effect animation */
  @keyframes magnetic-pulse {
    0% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 0.8;
    }
    50% {
      transform: translate(-50%, -50%) scale(1.1);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 0.8;
    }
  }

  /* Button styling - enhanced */
  .futuristic-button {
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 600;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .futuristic-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    transition: all 0.6s ease;
  }

  .futuristic-button:hover::before {
    left: 100%;
  }

  .primary-button {
    background: linear-gradient(to right, var(--primary), #4f46e5);
    color: white;
    box-shadow: 0 0 20px rgba(var(--primary), 0.5);
  }

  .primary-button:hover {
    box-shadow: 0 0 30px rgba(var(--primary), 0.7);
    transform: translateY(-3px);
  }

  .secondary-button {
    background: transparent;
    color: var(--foreground);
    border: 2px solid;
    border-image: linear-gradient(to right, var(--primary), #4f46e5) 1;
  }

  .secondary-button:hover {
    background: rgba(var(--primary), 0.15);
    transform: translateY(-3px);
  }

  @keyframes pulse {
    0% {
      opacity: 0.5;
    }
    50% {
      opacity: 0.9;
    }
    100% {
      opacity: 0.5;
    }
  }

  /* Responsive adjustments */
  @media (max-width: 1023px) {
    h1 {
      font-size: 3rem;
      text-align: center;
    }

    .content-wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      margin-bottom: 2rem;
    }

    /* Improve spacing on tablets */
    main {
      gap: 2rem;
    }
  }

  @media (max-width: 640px) {
    h1 {
      font-size: 2.5rem;
    }

    /* Better spacing on mobile */
    main {
      padding-top: 1rem;
      padding-bottom: 1rem;
      gap: 1rem;
    }

    /* Ensure buttons are properly sized on mobile */
    .futuristic-button {
      padding: 0.6rem 1.2rem;
      width: 100%;
      justify-content: center;
    }
  }

  @keyframes scrollDown {
    0% {
      transform: translateY(0);
      opacity: 1;
    }
    75% {
      transform: translateY(20px);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 0;
    }
  }

  .animate-scroll-down {
    animation: scrollDown 2s ease-in-out infinite;
  }
</style>

<script>
  // Immediately set up cursor elements to avoid FOUC
  document.addEventListener("DOMContentLoaded", initCursor);

  // Initialize cursor immediately to avoid FOUC
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initCursor);
  } else {
    initCursor();
  }

  function initCursor() {
    // First check if it's a touch device and disable cursor if it is
    const isTouchDevice =
      "ontouchstart" in window || navigator.maxTouchPoints > 0;

    const heroSection = document.querySelector(".custom-cursor-area");
    if (!heroSection) return;

    const cursorDot = document.getElementById(
      "custom-cursor-dot"
    ) as HTMLElement;
    const cursorOutline = document.getElementById(
      "custom-cursor-outline"
    ) as HTMLElement;
    const cursorGlow = document.getElementById(
      "custom-cursor-glow"
    ) as HTMLElement;

    if (!cursorDot || !cursorOutline || !cursorGlow) return;

    // Immediately hide cursor elements on touch devices
    if (isTouchDevice) {
      heroSection.classList.remove("cursor-active");
      cursorDot.style.display = "none";
      cursorOutline.style.display = "none";
      cursorGlow.style.display = "none";
      return; // Exit early for touch devices
    }

    // Continue with cursor setup for non-touch devices
    // Set initial positions to avoid jumps
    const initialX = window.innerWidth / 2;
    const initialY = window.innerHeight / 2;

    cursorDot.style.transform = `translate(${initialX}px, ${initialY}px)`;
    cursorOutline.style.transform = `translate(${initialX}px, ${initialY}px)`;
    cursorGlow.style.transform = `translate(${initialX}px, ${initialY}px)`;

    // Add cursor-active class to main element to hide default cursor
    heroSection.classList.add("cursor-active");

    // Only apply cursor effect when mouse is within the hero section
    heroSection.addEventListener("mouseenter", () => {
      cursorDot.style.opacity = "1";
      cursorOutline.style.opacity = "1";
      cursorGlow.style.opacity = "1";
    });

    heroSection.addEventListener("mouseleave", () => {
      cursorDot.style.opacity = "0";
      cursorOutline.style.opacity = "0";
      cursorGlow.style.opacity = "0";
    });

    // Track mouse position with optimized animation
    let mouseX = initialX;
    let mouseY = initialY;
    let outlineX = initialX;
    let outlineY = initialY;
    let glowX = initialX;
    let glowY = initialY;

    // Use requestAnimationFrame for smoother animation
    let animationFrameId: number | null = null;

    // Throttle mousemove event for better performance
    let lastMove = 0;
    const throttleTime = 10; // ms between updates

    // Update mouse position with throttling
    heroSection.addEventListener("mousemove", (e: MouseEvent) => {
      const now = performance.now();
      if (now - lastMove < throttleTime) return;
      lastMove = now;

      const rect = heroSection.getBoundingClientRect();
      mouseX = e.clientX;
      mouseY = e.clientY;

      // Check if mouse is within hero section bounds
      if (
        mouseX >= rect.left &&
        mouseX <= rect.right &&
        mouseY >= rect.top &&
        mouseY <= rect.bottom
      ) {
        // Move dot immediately for responsive feel
        cursorDot.style.transform = `translate(${mouseX}px, ${mouseY}px)`;

        // Start animation if not already running
        if (!animationFrameId) {
          animateCursor();
        }
      }
    });

    // Optimized smooth animation for cursor outline and glow
    function animateCursor() {
      // Calculate smooth movement with easing
      const outlineEasing = 0.2;
      const glowEasing = 0.08;

      outlineX = outlineX + (mouseX - outlineX) * outlineEasing;
      outlineY = outlineY + (mouseY - outlineY) * outlineEasing;

      glowX = glowX + (mouseX - glowX) * glowEasing;
      glowY = glowY + (mouseY - glowY) * glowEasing;

      cursorOutline.style.transform = `translate(${outlineX}px, ${outlineY}px)`;
      cursorGlow.style.transform = `translate(${glowX}px, ${glowY}px)`;

      // Only continue animation if there's significant movement
      const isMoving =
        Math.abs(mouseX - outlineX) > 0.1 ||
        Math.abs(mouseY - outlineY) > 0.1 ||
        Math.abs(mouseX - glowX) > 0.1 ||
        Math.abs(mouseY - glowY) > 0.1;

      if (isMoving) {
        animationFrameId = requestAnimationFrame(animateCursor);
      } else {
        animationFrameId = null;
      }
    }

    // Add magnetic effect for interactive elements within hero section
    const interactiveElements = heroSection.querySelectorAll(
      "a, button, .futuristic-button"
    );

    interactiveElements.forEach((el) => {
      el.addEventListener("mouseenter", () => {
        // Add hover classes for visual effect
        cursorOutline.classList.add("hover");
        cursorDot.classList.add("hover");
        cursorGlow.classList.add("hover");

        // Apply magnetic effect
        el.addEventListener("mousemove", magneticEffect);
      });

      el.addEventListener("mouseleave", () => {
        cursorOutline.classList.remove("hover");
        cursorDot.classList.remove("hover");
        cursorGlow.classList.remove("hover");

        // Remove magnetic effect
        el.removeEventListener("mousemove", magneticEffect);

        // Reset element transform
        (el as HTMLElement).style.transform = "";
      });
    });

    // Optimized magnetic pull effect
    function magneticEffect(e: MouseEvent) {
      const el = e.currentTarget as HTMLElement;
      const rect = el.getBoundingClientRect();

      // Calculate center of element
      const elCenterX = rect.left + rect.width / 2;
      const elCenterY = rect.top + rect.height / 2;

      // Calculate distance from mouse to center
      const deltaX = mouseX - elCenterX;
      const deltaY = mouseY - elCenterY;

      // Calculate magnetic pull (stronger when closer to center)
      const magneticPullX = deltaX * 0.3;
      const magneticPullY = deltaY * 0.3;

      // Apply transform to element for subtle movement
      el.style.transform = `translate(${magneticPullX}px, ${magneticPullY}px)`;

      // Move cursor more aggressively toward element center
      outlineX = elCenterX + deltaX * 0.4;
      outlineY = elCenterY + deltaY * 0.4;

      // Ensure animation is running
      if (!animationFrameId) {
        animateCursor();
      }
    }
  }
</script>
