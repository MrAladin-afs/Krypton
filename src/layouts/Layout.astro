---
import { SEO } from "astro-seo";
import Footer from "@/components/footer.astro";
import Navbar from "@/components/navbar/navbar.astro";
import "@fontsource-variable/inter/index.css";
import "@fontsource-variable/bricolage-grotesque";
import "@/styles/global.css";
import "aos/dist/aos.css";

export interface Props {
  title: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();

const resolvedImageWithDomain = new URL(
  "/opengraph.jpg",
  Astro.site
).toString();

const { title } = Astro.props;

const makeTitle = title
  ? title + " | " + "Krypton Scripts"
  : "Krypton Scripts - Premium Development Solutions";
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/avif" href="/favicon.heif" />
    <meta name="generator" content={Astro.generator} />

    <!-- <link rel="preload" as="image" href={src} alt="Hero" /> -->
    <SEO
      title={makeTitle}
      description="Krypton Scripts offers premium development solutions with 24/7 support, creativity, optimization, and futuristic designs."
      canonical={canonicalURL}
      twitter={{
        creator: "@kryptonscripts",
        site: "@kryptonscripts",
        card: "summary_large_image",
      }}
      openGraph={{
        basic: {
          url: canonicalURL,
          type: "website",
          title: `Krypton Scripts - Premium Development Solutions`,
          image: resolvedImageWithDomain,
        },
        image: {
          alt: "Krypton Scripts Homepage",
        },
      }}
    />
  </head>
  <body>
    <!-- Scroll progress indicator -->
    <div
      id="scrollProgress"
      class="fixed top-0 left-0 z-50 h-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 w-0 transition-all duration-100">
    </div>
   
      <Navbar />  
  
    
    <div class="pt-[-16px]">
      <slot />
    </div>
    <Footer />

    <!-- Scroll to top button -->
    <button
      id="scrollToTop"
      class="fixed bottom-16 right-4 z-50 p-0 w-10 h-10 flex items-center justify-center rounded-full bg-card/80 border border-border/50 text-foreground shadow-lg backdrop-blur-md opacity-0 invisible transition-all duration-300 hover:scale-110 group lg:bottom-4"
      aria-label="Scroll to top">
      <div
        class="absolute inset-0 rounded-full bg-gradient-to-br from-primary/20 to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
      </div>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2.5"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="text-primary group-hover:scale-110 transition-transform duration-300">
        <path d="m18 15-6-6-6 6"></path>
      </svg>
    </button>

    <style is:global>
      /* Improve Page speed */
      /* https://css-tricks.com/almanac/properties/c/content-visibility/ */
      img {
        content-visibility: auto;
      }

      /* Prevent layout shifts */
      html {
        overflow-x: hidden;
        scroll-behavior: smooth;
      }

      /* Optimize animations */
      * {
        backface-visibility: hidden;
      }

      /* Improve scrolling performance */
      body {
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
      }

      /* Add padding at bottom of page for mobile navbar */
      @media (max-width: 768px) {
        .page-content {
          padding-bottom: 6rem;
        }
      }

      /* Reduce animation complexity on mobile */
      @media (max-width: 768px) {
        [data-aos] {
          opacity: 1 !important;
          transform: none !important;
          visibility: visible !important;
        }
      }
    </style>
    <script>
      import AOS from "aos";

      // Initialize AOS with improved settings
      document.addEventListener("DOMContentLoaded", () => {
        // Completely disable AOS on mobile devices
        const isMobile =
          window.innerWidth < 768 ||
          navigator.userAgent.match(/Android/i) ||
          navigator.userAgent.match(/iPhone|iPad|iPod/i);

        if (isMobile) {
          // Don't initialize AOS on mobile at all
          document.querySelectorAll("[data-aos]").forEach((el) => {
            el.removeAttribute("data-aos");
            el.removeAttribute("data-aos-delay");
            el.removeAttribute("data-aos-duration");
          });
        } else {
          // Initialize with optimized settings on desktop
          AOS.init({
            duration: 500,
            easing: "ease-out",
            once: true,
            mirror: false,
            offset: 30,
            disable: "phone",
            startEvent: "DOMContentLoaded",
          });
        }

        const scrollToTopButton = document.getElementById("scrollToTop");
        const scrollProgress = document.getElementById("scrollProgress");

        // Optimized scroll progress indicator with debouncing
        let ticking = false;

        const updateScrollProgress = () => {
          if (!ticking) {
            window.requestAnimationFrame(() => {
              const windowHeight =
                document.documentElement.scrollHeight -
                document.documentElement.clientHeight;
              const scrolled = (window.scrollY / windowHeight) * 100;

              if (scrollProgress) {
                scrollProgress.style.width = `${scrolled}%`;
              }

              ticking = false;
            });

            ticking = true;
          }
        };

        // Handle scroll events with passive option for better performance
        window.addEventListener(
          "scroll",
          () => {
            // Update scroll progress
            updateScrollProgress();

            // Show/hide scroll to top button
            if (scrollToTopButton) {
              if (window.scrollY > 500) {
                if (!scrollToTopButton.classList.contains("visible")) {
                  scrollToTopButton.classList.remove("opacity-0", "invisible");
                  scrollToTopButton.classList.add("opacity-100", "visible");
                }
              } else {
                if (scrollToTopButton.classList.contains("visible")) {
                  scrollToTopButton.classList.add("opacity-0", "invisible");
                  scrollToTopButton.classList.remove("opacity-100", "visible");
                }
              }
            }
          },
          { passive: true }
        );

        // Scroll to top when button is clicked
        if (scrollToTopButton) {
          scrollToTopButton.addEventListener("click", () => {
            window.scrollTo({
              top: 0,
              behavior: "smooth",
            });
          });
        }

        // Initialize scroll progress on page load
        updateScrollProgress();

        // Update active tab in the navbar when URL changes
        const updateActiveTab = () => {
          // Dispatch a custom event to force the navbar to update
          window.dispatchEvent(new CustomEvent("urlChanged"));
        };

        // Listen for client-side navigation
        document.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;
          const anchor = target.closest("a");

          if (
            anchor &&
            anchor.href &&
            anchor.href.startsWith(window.location.origin)
          ) {
            // Small delay to allow the navigation to complete
            setTimeout(updateActiveTab, 100);
          }
        });
      });
    </script>
  </body>
</html>
<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
